name: "Terraform Format"

on:
  push:
    branches:
    - '*' # 모든 브랜치에 대한 푸시 이벤트를 감지합니다.
    - '!main' # main 브랜치는 제외합니다.

env:
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}" # Terraform API 토큰
  WORKING_DIRECTORY: "." # 작업 디렉토리 설정

jobs:
  terraform:
    name: "Terraform Format"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
      actions: write


    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Init
      run: terraform init # Terraform 초기화

    - name: Terraform Format
      run: terraform fmt -recursive ${{ env.WORKING_DIRECTORY }} # Terraform 포맷팅

    - name: git add
      run: git add ${{ env.WORKING_DIRECTORY }} # 변경사항 추가

    - name: git commit
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        git commit -m "Terraform Format" # 커밋 생성

    - name: git push
      run: git push # 변경사항 푸시

    - name: Create Pull Request
      uses: actions/github-script@v6
      id: create_pr
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
         // 1. 브랜치 이름 생성
         const branchName = `terraform-format-${new Date().toISOString().slice(0, 10)}`;
          // 2. 브랜치 생성
          const createRef = await github.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: `refs/heads/${branchName}`,
            sha: context.sha
          });
          // 3. PR 생성
          const pr = await github.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Terraform Format`,
            head: branchName,
            base: 'main',
            body: `Terraform Format`,
          });
          return pr.data.html_url;
